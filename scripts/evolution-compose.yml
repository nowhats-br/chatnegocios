version: '3.8'
services:
  evolution_api:
    image: ${EVOLUTION_IMAGE}
    container_name: evolution_api
    ports:
      - "8080:8080"
    environment:
      # Usa a mesma chave definida no .env do projeto (VITE_EVOLUTION_API_KEY)
      - AUTHENTICATION_API_KEY=${VITE_EVOLUTION_API_KEY}
      # Configuração do servidor (sem Traefik)
      - SERVER_TYPE=${SERVER_TYPE}
      - SERVER_URL=${SERVER_URL}
      - CORS_ORIGIN=*
      - DATABASE_ENABLED=true
      - DATABASE_PROVIDER=postgresql
      - DATABASE_CONNECTION_URI=postgresql://postgres:postgres@evolution_postgres:5432/evolution
      # Redis (cache) — necessário para Evolution v2.2.x
      - CACHE_REDIS_ENABLED=true
      - CACHE_REDIS_URI=redis://evolution_redis:6379/6
      - CACHE_REDIS_TTL=604800
      - CACHE_REDIS_PREFIX_KEY=evolution
      - CACHE_REDIS_SAVE_INSTANCES=false
      - CACHE_LOCAL_ENABLED=false
      # Nginx proxy (nginx-proxy + acme-companion)
      - VIRTUAL_HOST=${EVOLUTION_DOMAIN}
      - VIRTUAL_PORT=8080
      - LETSENCRYPT_HOST=${EVOLUTION_DOMAIN}
    volumes:
      - evolution_store:/evolution/store
      - evolution_instances:/evolution/instances
    restart: always
    depends_on:
      - evolution_postgres
      - evolution_redis
    labels:
      - traefik.enable=${TRAEFIK_ENABLE}
      - traefik.http.routers.evolution.rule=Host(`${EVOLUTION_DOMAIN}`)
      - traefik.http.routers.evolution.entrypoints=websecure
      - traefik.http.routers.evolution.tls=true
      - traefik.http.routers.evolution.tls.certresolver=le
      - traefik.http.services.evolution.loadbalancer.server.port=8080
      - traefik.docker.network=proxy
    networks:
      - proxy
      - app_net

  evolution_postgres:
    image: postgres:16-alpine
    container_name: evolution_postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=evolution
    volumes:
      - evolution_pgdata:/var/lib/postgresql/data
    networks:
      - app_net
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 10

  evolution_redis:
    image: redis:7
    container_name: evolution_redis
    command: >
      redis-server --port 6379 --appendonly yes
    volumes:
      - evolution_redis_data:/data
    networks:
      - app_net
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10

volumes:
  evolution_store:
  evolution_instances:
  evolution_pgdata:
  evolution_redis_data:

networks:
  proxy:
    external: true
  app_net:
    external: true